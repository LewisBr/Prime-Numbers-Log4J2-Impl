package com.updoxx.util;

import com.updoxx.domain.ResponseWrapper;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.LoggerContext;
import org.apache.logging.log4j.core.config.Configuration;
import org.apache.logging.log4j.core.config.LoggerConfig;

/**
 * Helper class that provides various methods that are utilized in multiple places, or it was cleaner to house them here.
 */
public class Helper {
    private static final Logger LOGGER = LogManager.getLogger(Helper.class);

    /**
     * Helper method that will set logging levels on all Log4J Loggers to the given input {@param level}.
     *
     * @param level Level that the logging configuration should be set to.
     * @note In a real program there are two problems with this approach that work fine just because this is a standalone process.
     * [1] Should not override logging levels, should write different loggers that are static on what they log level wise.
     * [2] If you do need to dynamically increase logs it should be done by a java/system option, not a command line argument.
     */
    public static void setLog4JLogLevel(Level level) {
        if (level != null) {
            LoggerContext ctx          = (LoggerContext) LogManager.getContext(false);
            Configuration config       = ctx.getConfiguration();
            LoggerConfig  loggerConfig = config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME);
            loggerConfig.setLevel(level);
            ctx.updateLoggers();
            LOGGER.debug("Debug Mode Detected -- Setting Logging Levels to {}", level.toString());
        }
    }

    /**
     * Helper method that will log the appropriate output from a given {@link ResponseWrapper}
     *
     * @param response ResponeWrapper generated by PrimeDelegate#generate that has content about what the runs status was.
     */
    public static void processGenerateResponse(ResponseWrapper response) {
        if (response != null) {
            if (response.getResponseCode().equals(Constants.SUCCESS)) {
                // Could potentially save some time by not checking debug enabled and using multiple logger statements since interpolation doesn't process values before checking if it is applicable
                if (!LOGGER.isDebugEnabled()) {
                    LOGGER.info(Constants.SUCCESSBLOCK, response.getLowerValue(), response.getHigherValue(), response.getListOfPrimes().toString());
                } else {
                    LOGGER.debug(Constants.SUCCESSBLOCK_DEBUG, response.getLowerValue(), response.getHigherValue(), response.getListOfPrimes().toString(), response.getRuntime());
                }
            } else {
                LOGGER.info(Constants.ERRORBLOCK, response.getResponseMessage());
            }
        } else {
            // Since ResponseWrapper is always generated, this should never be shown. But safety first.
            LOGGER.info(Constants.ERRORBLOCK_UNKNOWN);
        }
    }
}
